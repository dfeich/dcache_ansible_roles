---
# tasks file for roles/dcache_postgresql

# TODO: maybe must make sure that now other node is still trying
# to access the DB

- name: Install postgresql packages
  yum:
    name: "{{ postgresql_packages }}"
    state: present
    
- name: Initialize postgres DB
  shell: "{{ postgresql_bin_path }}/postgresql-11-setup initdb"
  args:
    creates: /var/lib/pgsql/{{ postgres_version }}/data/PG_VERSION

- name: Configure pg_hba.conf host based authz if entries configured
  template:
    src: "pg_hba.conf.j2"
    dest: "{{ postgresql_config_path }}/pg_hba.conf"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: 0600
  notify: restart postgresql
  when: postgresql_hba_entries | length > 0

- name: Configure global settings in postgresql.conf
  lineinfile:
    dest: "{{ postgresql_config_path }}/postgresql.conf"
    #  if an active directive already exists, replace it
    regexp: "^{{ item | regex_replace(' *=.*', '') }} *=.+$"
    #  if not, insert the line before the appropriate comment
    #  directive
    insertbefore: "^#{{ item | regex_replace(' *=.*', '') }} *=.+$"
    line: "{{ item }}"
    state: present
  loop: "{{ postgresql_global_config_options }}"
  notify: restart postgresql

- name: Ensure postgres is started and enabled at boot
  service:
    name: "{{ postgresql_service }}"
    state: started
    enabled: yes

# createdb -U postgres chimera
- name: create chimera DB
  postgresql_db:
    name: chimera

# createuser -U postgres --no-superuser --no-createrole --createdb --pwprompt chimera 
- name: create chimera DB user
  postgresql_user:
    name: chimera
    # TODO: use a vault password
    password: "pw-chimera"
    role_attr_flags: NOSUPERUSER,NOCREATEROLE,CREATEDB
  become: true
  # only postgres user is allowed to manage postgres DB with peer setup
  # here, with local trust configured this is not strictly necessary
  become_user: "{{ postgresql_user }}"
  # do not write this to ansible log due to password
  no_log: true

# createuser -U postgres --no-superuser --no-createrole --createdb --pwprompt dcache
- name: create dcache DB user
  postgresql_user:
    name: "{{ dcache_db_owner }}"
    # TODO: use a vault password
    password: "pw-dcache"
    role_attr_flags: NOSUPERUSER,NOCREATEROLE,CREATEDB
  become: true
  become_user: "{{ postgresql_user }}"
  no_log: true
  
# createdb -U dcache dcache
- name: create dcache DB
  postgresql_db:
    name: dcache
    session_role: "{{ dcache_db_owner }}"
    
# createdb -O dcache -U postgres billing
- name: create billing DB
  postgresql_db:
    name: billing
    owner: "{{ dcache_db_owner }}"

# only run this once. Place a file to remember.
# TODO: For this to work, the layout file must contain the cells requiring the DB
- name: Let dcache initialize its database
  shell: "dcache database update && touch {{ postgresql_config_path }}/DCACHE_INITIALIZED_OK"
  args:
    creates: "{{ postgresql_config_path }}/DCACHE_INITIALIZED_OK"

- name: install the exports file
  template:
    src: exports.j2
    dest: /etc/exports
    owner: root
    group: root
    mode: 0644

- name: Start dcache so we have the NFS namespace available
  shell: "/usr/bin/dcache start"
  # TODO: correct setting of when_changed. Maybe implement
  #       a test for dcache running or use a handler

# Note: if the dir already exists, the chimera command will print
#       an error about the failure to create, but the return value
#       is still 0, i.e success. This allows to rerun this task, we
#       do not need to protect it.
- name: Let chimera create the top root dir {{ dcache_fsroot }}
  shell: "/usr/bin/chimera mkdir {{ dcache_fsroot }}"
  # TODO: correct implementation of when_changed
  
- name: put dcache mountpoint {{ dcache_fsroot }} in fstab and mount
  mount:
    path: '{{ dcache_fsroot }}'
    src: 'localhost:{{ dcache_fsroot }}'
    fstype: nfs
    opts: vers=3,_netdev
    state: mounted
    boot: no
    
